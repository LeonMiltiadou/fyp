{"ast":null,"code":"var __jsx = React.createElement;\nimport { createContext } from 'react';\nimport React, { Component } from \"react\";\nimport commerce from '../lib/commerce';\nimport { orderData } from './testdata';\nexport const AppContext = /*#__PURE__*/createContext();\n\nclass AppWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      order: orderData,\n      cart: {},\n      isCartVisible: false,\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage.bind(this),\n      toggleCart: this.toggleCart.bind(this),\n      handleAddToCart: this.handleAddToCart.bind(this),\n      handleUpdateCartQty: this.handleUpdateCartQty.bind(this),\n      handleRemoveFromCart: this.handleRemoveFromCart.bind(this),\n      handleEmptyCart: this.handleEmptyCart.bind(this),\n      fetchCart: this.fetchCart.bind(this),\n      refreshCart: this.refreshCart.bind(this),\n      handleCaptureCheckout: this.handleCaptureCheckout.bind(this)\n    };\n  } //Actions\n\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\n\n\n  loadOrderFromLocalStorage() {\n    if (window.localStorage.getItem('order_receipt')) {\n      this.setState({\n        order: JSON.parse(window.localStorage.getItem('order_receipt'))\n      });\n    }\n  }\n  /**\r\n   * Show hide cart in nav\r\n   */\n\n\n  toggleCart() {\n    const {\n      isCartVisible\n    } = this.state;\n    this.setState({\n      isCartVisible: !isCartVisible\n    });\n  }\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\n\n\n  handleAddToCart(productId, quantity) {\n    commerce.cart.add(productId, quantity).then(item => {\n      this.setState({\n        cart: item.cart\n      });\n    }).catch(error => {\n      console.error('There was an error adding the item to the cart', error);\n    });\n  }\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\n\n\n  handleUpdateCartQty(lineItemId, quantity) {\n    commerce.cart.update(lineItemId, {\n      quantity\n    }).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.log('There was an error updating the cart items', error);\n    });\n  }\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\n\n\n  handleRemoveFromCart(lineItemId) {\n    commerce.cart.remove(lineItemId).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error removing the item from the cart', error);\n    });\n  }\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\n\n\n  handleEmptyCart() {\n    commerce.cart.empty().then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error emptying the cart', error);\n    });\n  }\n  /**\r\n  * Retrieve the current cart or create one if one does not exist\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\n\n\n  fetchCart() {\n    commerce.cart.retrieve().then(cart => {\n      this.setState({\n        cart: cart\n      });\n    }).catch(error => {\n      console.error('There was an error fetching the cart', error);\n    });\n  }\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\n\n\n  refreshCart() {\n    commerce.cart.refresh().then(newCart => {\n      this.setState({\n        cart: newCart\n      });\n    }).catch(error => {\n      console.log('There was an error refreshing your cart', error);\n    });\n  }\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {string} checkoutTokenId The ID of the checkout token\r\n   * @param {object} newOrder The new order object data\r\n   */\n\n\n  handleCaptureCheckout(checkoutTokenId, newOrder) {\n    commerce.checkout.capture(checkoutTokenId, newOrder).then(order => {\n      this.setState({\n        order: order\n      }); // Store the order in session storage so we can show it again\n      // if the user refreshes the page!\n\n      window.localStorage.setItem('order_receipt', JSON.stringify(order)); // Clears the cart\n\n      this.refreshCart(); // Send the user to the receipt\n\n      this.props.history.push('/confirmation');\n    }).catch(error => {\n      console.log('There was an error confirming your order', error);\n    });\n  }\n\n  render() {\n    return __jsx(AppContext.Provider, {\n      value: this.state\n    }, this.props.children);\n  }\n\n}\n\nexport { AppWrapper };\nexport function useAppContext() {\n  return useContext(AppContext);\n}","map":null,"metadata":{},"sourceType":"module"}