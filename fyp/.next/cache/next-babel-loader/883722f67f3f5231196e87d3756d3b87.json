{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KGM\\\\OneDrive\\\\Documents\\\\GitHub\\\\chec\\\\fyp\\\\context\\\\state.js\";\nvar __jsx = React.createElement;\nimport { createContext } from 'react';\nimport React, { Component } from \"react\";\nimport commerce from '../lib/commerce';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nexport const AppContext = /*#__PURE__*/createContext();\nconst cartAPI = axios.create({\n  baseURL: process.env.CARTMSURL,\n  timeout: 1000,\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nclass AppWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      order: {},\n      cart: {},\n      isCartVisible: false,\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage.bind(this),\n      toggleCart: this.toggleCart.bind(this),\n      handleAddToCart: this.handleAddToCart.bind(this),\n      handleUpdateCartQty: this.handleUpdateCartQty.bind(this),\n      handleRemoveFromCart: this.handleRemoveFromCart.bind(this),\n      handleEmptyCart: this.handleEmptyCart.bind(this),\n      fetchCart: this.fetchCart.bind(this),\n      refreshCart: this.refreshCart.bind(this),\n      handleCaptureCheckout: this.handleCaptureCheckout.bind(this)\n    };\n  }\n\n  async fetchCart() {\n    const cartID = Cookies.get('cartID');\n\n    if (await this.retrieveCart(cartID)) {\n      console.log(\"Cart Retrieved!\");\n    } else if (await this.createCart()) {\n      console.log(\"Cart Created!\");\n    } else {\n      console.error(\"An error occured while fetching the cart.\");\n    }\n  } //Actions\n\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\n\n\n  loadOrderFromLocalStorage() {\n    if (window.localStorage.getItem('order_receipt')) {\n      this.setState({\n        order: JSON.parse(window.localStorage.getItem('order_receipt'))\n      });\n    }\n  }\n  /**\r\n   * Show hide cart in nav\r\n   */\n\n\n  toggleCart() {\n    const {\n      isCartVisible\n    } = this.state;\n    this.setState({\n      isCartVisible: !isCartVisible\n    });\n  } //-> start of cart functions\n\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\n\n\n  handleAddToCart(productId, quantity) {\n    cartAPI.post(\"/addto\", {\n      cartIdproductId: productId,\n      quantity: quantity\n    }).then(cart => {}).catch(error => {});\n    commerce.cart.add(productId, quantity).then(item => {\n      this.setState({\n        cart: item.cart\n      });\n    }).catch(error => {\n      console.error('There was an error adding the item to the cart', error);\n    });\n  }\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\n\n\n  handleUpdateCartQty(lineItemId, quantity) {\n    commerce.cart.update(lineItemId, {\n      quantity\n    }).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.log('There was an error updating the cart items', error);\n    });\n  }\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\n\n\n  handleRemoveFromCart(lineItemId) {\n    commerce.cart.remove(lineItemId).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error removing the item from the cart', error);\n    });\n  }\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\n\n\n  handleEmptyCart() {\n    commerce.cart.empty().then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error emptying the cart', error);\n    });\n  }\n  /**\r\n  * Creates a cart\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\n\n\n  async createCart() {\n    return await cartAPI.get(\"/create\").then(cart => {\n      this.setState({\n        cart: cart.data\n      });\n      Cookies.set('cartID', cart.data.id);\n      return true;\n    }).catch(error => {\n      console.error(error);\n      return false;\n    });\n  }\n\n  async retrieveCart(cartID) {\n    return await cartAPI.get(\"/fetch/\" + cartID).then(cart => {\n      this.setState({\n        cart: cart.data\n      });\n      return true;\n    }).catch(error => {\n      console.error(error);\n      return false;\n    });\n  }\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\n\n\n  refreshCart() {\n    commerce.cart.refresh().then(newCart => {\n      this.setState({\n        cart: newCart\n      });\n    }).catch(error => {\n      console.log('There was an error refreshing your cart', error);\n    });\n  } //=> end fo cart functions\n\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {string} checkoutTokenId The ID of the checkout token\r\n   * @param {object} newOrder The new order object data\r\n   */\n\n\n  handleCaptureCheckout(checkoutTokenId, newOrder) {\n    commerce.checkout.capture(checkoutTokenId, newOrder).then(order => {\n      this.setState({\n        order: order\n      }); // Store the order in session storage so we can show it again\n      // if the user refreshes the page!\n\n      window.localStorage.setItem('order_receipt', JSON.stringify(order)); // Clears the cart\n\n      this.refreshCart(); // Send the user to the receipt\n\n      this.props.history.push('/confirmation');\n    }).catch(error => {\n      console.log('There was an error confirming your order', error);\n    });\n  }\n\n  render() {\n    return __jsx(AppContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport { AppWrapper };\nexport function useAppContext() {\n  return useContext(AppContext);\n}","map":{"version":3,"sources":["C:/Users/KGM/OneDrive/Documents/GitHub/chec/fyp/context/state.js"],"names":["createContext","React","Component","commerce","axios","Cookies","AppContext","cartAPI","create","baseURL","process","env","CARTMSURL","timeout","headers","AppWrapper","constructor","state","order","cart","isCartVisible","loadOrderFromLocalStorage","bind","toggleCart","handleAddToCart","handleUpdateCartQty","handleRemoveFromCart","handleEmptyCart","fetchCart","refreshCart","handleCaptureCheckout","cartID","get","retrieveCart","console","log","createCart","error","window","localStorage","getItem","setState","JSON","parse","productId","quantity","post","cartIdproductId","then","catch","add","item","lineItemId","update","resp","remove","empty","data","set","id","refresh","newCart","checkoutTokenId","newOrder","checkout","capture","setItem","stringify","props","history","push","render","children","useAppContext","useContext"],"mappings":"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","sourcesContent":["import { createContext } from 'react';\r\nimport React, { Component } from \"react\"\r\nimport commerce from '../lib/commerce';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie'\r\n\r\n\r\nexport const AppContext = createContext();\r\n\r\nconst cartAPI = axios.create({\r\n  baseURL: process.env.CARTMSURL,\r\n  timeout: 1000,\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  }\r\n});\r\n\r\n\r\n\r\nclass AppWrapper extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      order: {},\r\n      cart: {},\r\n      isCartVisible: false,\r\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage.bind(this),\r\n      toggleCart: this.toggleCart.bind(this),\r\n      handleAddToCart: this.handleAddToCart.bind(this),\r\n      handleUpdateCartQty: this.handleUpdateCartQty.bind(this),\r\n      handleRemoveFromCart: this.handleRemoveFromCart.bind(this),\r\n      handleEmptyCart: this.handleEmptyCart.bind(this),\r\n      fetchCart: this.fetchCart.bind(this),\r\n      refreshCart: this.refreshCart.bind(this),\r\n      handleCaptureCheckout: this.handleCaptureCheckout.bind(this)\r\n    };\r\n\r\n\r\n  }\r\n\r\n    async fetchCart() {\r\n    const cartID = Cookies.get('cartID');\r\n\r\n    if (await this.retrieveCart(cartID)){\r\n      console.log(\"Cart Retrieved!\");\r\n    }else if(await this.createCart()){\r\n      console.log(\"Cart Created!\")\r\n    }else{\r\n      console.error(\"An error occured while fetching the cart.\")\r\n    }\r\n  }\r\n\r\n  //Actions\r\n\r\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\r\n  loadOrderFromLocalStorage() {\r\n    if (window.localStorage.getItem('order_receipt')) {\r\n      this.setState({ order: JSON.parse(window.localStorage.getItem('order_receipt')) })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show hide cart in nav\r\n   */\r\n  toggleCart() {\r\n    const { isCartVisible } = this.state;\r\n    this.setState({\r\n      isCartVisible: !isCartVisible,\r\n    });\r\n  }\r\n\r\n  //-> start of cart functions\r\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\r\n  handleAddToCart(productId, quantity) {\r\n\r\n    cartAPI.post(\"/addto\", {cartIdproductId : productId, quantity:quantity}).then((cart)=>{\r\n\r\n    }).catch((error) => {\r\n\r\n    });\r\n\r\n    commerce.cart.add(productId, quantity).then((item) => {\r\n      this.setState({ cart: item.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error adding the item to the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\r\n  handleUpdateCartQty(lineItemId, quantity) {\r\n    commerce.cart.update(lineItemId, { quantity }).then((resp) => {\r\n      this.setState({ cart: resp.cart })\r\n    }).catch((error) => {\r\n      console.log('There was an error updating the cart items', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\r\n  handleRemoveFromCart(lineItemId) {\r\n    commerce.cart.remove(lineItemId).then((resp) => {\r\n      this.setState({\r\n        cart: resp.cart\r\n      })\r\n    }).catch((error) => {\r\n      console.error('There was an error removing the item from the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\r\n  handleEmptyCart() {\r\n    commerce.cart.empty().then((resp) => {\r\n      this.setState({ cart: resp.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error emptying the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Creates a cart\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\r\n  async createCart() {\r\n\r\n    return await cartAPI.get(\"/create\").then((cart) => {\r\n      this.setState({ cart: cart.data });\r\n      Cookies.set('cartID', cart.data.id);\r\n      return true;\r\n    }\r\n    ).catch((error) => {\r\n      console.error(error)\r\n      return false;\r\n    }\r\n    );\r\n  }\r\n\r\n  async retrieveCart(cartID){\r\n    return await cartAPI.get(\"/fetch/\"+cartID).then((cart) => {\r\n      this.setState({ cart: cart.data });\r\n      return true;\r\n    }\r\n    ).catch((error) => {\r\n      console.error(error)\r\n      return false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\r\n  refreshCart() {\r\n    commerce.cart.refresh().then((newCart) => {\r\n      this.setState({\r\n        cart: newCart,\r\n      })\r\n    }).catch((error) => {\r\n      console.log('There was an error refreshing your cart', error);\r\n    });\r\n  }\r\n  //=> end fo cart functions\r\n\r\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {string} checkoutTokenId The ID of the checkout token\r\n   * @param {object} newOrder The new order object data\r\n   */\r\n  handleCaptureCheckout(checkoutTokenId, newOrder) {\r\n\r\n    commerce.checkout.capture(checkoutTokenId, newOrder).then((order) => {\r\n\r\n      this.setState({\r\n        order: order,\r\n      });\r\n\r\n      // Store the order in session storage so we can show it again\r\n      // if the user refreshes the page!\r\n      window.localStorage.setItem('order_receipt', JSON.stringify(order));\r\n      // Clears the cart\r\n      this.refreshCart();\r\n      // Send the user to the receipt\r\n      this.props.history.push('/confirmation');\r\n    }).catch((error) => {\r\n      console.log('There was an error confirming your order', error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport { AppWrapper };\r\n\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}