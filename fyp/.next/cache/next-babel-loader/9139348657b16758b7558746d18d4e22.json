{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport commerce from '../lib/commerce';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faShoppingBag, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { AppContext } from '../context/state.js';\nimport Hero from '../components/Hero';\nimport ProductsList from '../components/ProductsList';\nimport Cart from '../components/Cart';\nlibrary.add(faShoppingBag, faTimes);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      merchant: {},\n      products: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMerchantDetails();\n    this.fetchProducts();\n    this.context.fetchCart();\n    this.context.loadOrderFromLocalStorage();\n  }\n  /**\r\n   * Fetch merchant details\r\n   * https://commercejs.com/docs/sdk/full-sdk-reference#merchants\r\n   */\n\n\n  fetchMerchantDetails() {\n    commerce.merchants.about().then(merchant => {\n      this.setState({\n        merchant: merchant\n      });\n    }).catch(error => {\n      console.log('There was an error fetch the merchant details', error);\n    });\n  }\n  /**\r\n   * Fetch products data from Chec and stores in the products data object.\r\n   * https://commercejs.com/docs/sdk/products\r\n   */\n\n\n  fetchProducts() {\n    commerce.products.list().then(products => {\n      this.setState({\n        products: products.data\n      });\n    }).catch(error => {\n      console.log('There was an error fetching the products', error);\n    });\n  }\n\n  renderCartNav() {\n    const {\n      cart,\n      isCartVisible\n    } = this.context;\n    return __jsx(\"div\", {\n      className: \"nav\"\n    }, __jsx(\"div\", {\n      className: \"nav__cart\",\n      onClick: this.context.toggleCart\n    }, !isCartVisible ? __jsx(\"button\", {\n      className: \"nav__cart-open\"\n    }, __jsx(FontAwesomeIcon, {\n      size: \"2x\",\n      icon: \"shopping-bag\",\n      color: \"#292B83\"\n    }), cart !== null ? __jsx(\"span\", null, cart.total_items) : '') : __jsx(\"button\", {\n      className: \"nav__cart-close\"\n    }, __jsx(FontAwesomeIcon, {\n      size: \"1x\",\n      icon: \"times\",\n      color: \"white\"\n    }))));\n  }\n\n  render() {\n    const {\n      products,\n      merchant\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"app\"\n    }, __jsx(React.Fragment, null, __jsx(Hero, {\n      merchant: merchant\n    }), this.renderCartNav(), this.context.isCartVisible && __jsx(Cart, _extends({}, this.props, {\n      handleCaptureCheckout: this.handleCaptureCheckout\n    })), __jsx(ProductsList, _extends({}, this.props, {\n      products: products\n    }))));\n  }\n\n}\n\n_defineProperty(App, \"contextType\", AppContext);\n\n;\nexport default App;","map":null,"metadata":{},"sourceType":"module"}