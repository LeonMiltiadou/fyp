{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KGM\\\\OneDrive\\\\Documents\\\\GitHub\\\\chec\\\\fyp\\\\context\\\\state.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { createContext } from 'react';\nimport React, { Component } from \"react\";\nimport commerce from '../lib/commerce';\nimport axios from 'axios';\nexport const AppContext = /*#__PURE__*/createContext();\nconst cartAPI = axios.create({\n  baseURL: process.env.CARTMSURL,\n  timeout: 1000,\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nclass AppWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      order: {},\n      cart: {},\n      isCartVisible: false,\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage.bind(this),\n      toggleCart: this.toggleCart.bind(this),\n      handleAddToCart: this.handleAddToCart.bind(this),\n      handleUpdateCartQty: this.handleUpdateCartQty.bind(this),\n      handleRemoveFromCart: this.handleRemoveFromCart.bind(this),\n      handleEmptyCart: this.handleEmptyCart.bind(this),\n      fetchCart: this.fetchCart.bind(this),\n      refreshCart: this.refreshCart.bind(this),\n      handleCaptureCheckout: this.handleCaptureCheckout.bind(this)\n    };\n  } //Actions\n\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\n\n\n  loadOrderFromLocalStorage() {\n    if (window.localStorage.getItem('order_receipt')) {\n      this.setState({\n        order: JSON.parse(window.localStorage.getItem('order_receipt'))\n      });\n    }\n  }\n  /**\r\n   * Show hide cart in nav\r\n   */\n\n\n  toggleCart() {\n    const {\n      isCartVisible\n    } = this.state;\n    this.setState({\n      isCartVisible: !isCartVisible\n    });\n  } //-> start of cart functions\n\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\n\n\n  handleAddToCart(productId, quantity) {\n    commerce.cart.add(productId, quantity).then(item => {\n      this.setState({\n        cart: item.cart\n      });\n    }).catch(error => {\n      console.error('There was an error adding the item to the cart', error);\n    });\n  }\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\n\n\n  handleUpdateCartQty(lineItemId, quantity) {\n    commerce.cart.update(lineItemId, {\n      quantity\n    }).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.log('There was an error updating the cart items', error);\n    });\n  }\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\n\n\n  handleRemoveFromCart(lineItemId) {\n    commerce.cart.remove(lineItemId).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error removing the item from the cart', error);\n    });\n  }\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\n\n\n  handleEmptyCart() {\n    commerce.cart.empty().then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error emptying the cart', error);\n    });\n  }\n  /**\r\n  * Retrieve the current cart or create one if one does not exist\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\n\n\n  fetchCart() {\n    cartAPI.get(\"/create\").then(cart => {\n      console.log();\n      this.setState({\n        cart: cart\n      });\n    }).catch(error => console.error(error)); // commerce.cart.retrieve().then((cart) => {\n    //   this.setState({ cart: cart });\n    // }).catch((error) => {\n    //   console.error('There was an error fetching the cart', error);\n    // });\n  }\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\n\n\n  refreshCart() {\n    commerce.cart.refresh().then(newCart => {\n      this.setState({\n        cart: newCart\n      });\n    }).catch(error => {\n      console.log('There was an error refreshing your cart', error);\n    });\n  } //=> end fo cart functions\n\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {string} checkoutTokenId The ID of the checkout token\r\n   * @param {object} newOrder The new order object data\r\n   */\n\n\n  handleCaptureCheckout(checkoutTokenId, newOrder) {\n    commerce.checkout.capture(checkoutTokenId, newOrder).then(order => {\n      this.setState({\n        order: order\n      }); // Store the order in session storage so we can show it again\n      // if the user refreshes the page!\n\n      window.localStorage.setItem('order_receipt', JSON.stringify(order)); // Clears the cart\n\n      this.refreshCart(); // Send the user to the receipt\n\n      this.props.history.push('/confirmation');\n    }).catch(error => {\n      console.log('There was an error confirming your order', error);\n    });\n  }\n\n  render() {\n    return __jsx(AppContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport { AppWrapper };\nexport function useAppContext() {\n  _s();\n\n  return useContext(AppContext);\n}\n\n_s(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");","map":{"version":3,"sources":["C:/Users/KGM/OneDrive/Documents/GitHub/chec/fyp/context/state.js"],"names":["createContext","React","Component","commerce","axios","AppContext","cartAPI","create","baseURL","process","env","CARTMSURL","timeout","headers","AppWrapper","constructor","state","order","cart","isCartVisible","loadOrderFromLocalStorage","bind","toggleCart","handleAddToCart","handleUpdateCartQty","handleRemoveFromCart","handleEmptyCart","fetchCart","refreshCart","handleCaptureCheckout","window","localStorage","getItem","setState","JSON","parse","productId","quantity","add","then","item","catch","error","console","lineItemId","update","resp","log","remove","empty","get","refresh","newCart","checkoutTokenId","newOrder","checkout","capture","setItem","stringify","props","history","push","render","children","useAppContext","useContext"],"mappings":"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","sourcesContent":["import { createContext } from 'react';\r\nimport React, { Component } from \"react\"\r\nimport commerce from '../lib/commerce';\r\nimport axios from 'axios';\r\n\r\nexport const AppContext = createContext();\r\n\r\nconst cartAPI = axios.create({\r\n  baseURL: process.env.CARTMSURL,\r\n  timeout: 1000,\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  }\r\n});\r\n\r\n\r\n\r\nclass AppWrapper extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      order: {},\r\n      cart: {},\r\n      isCartVisible: false,\r\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage.bind(this),\r\n      toggleCart: this.toggleCart.bind(this),\r\n      handleAddToCart: this.handleAddToCart.bind(this),\r\n      handleUpdateCartQty: this.handleUpdateCartQty.bind(this),\r\n      handleRemoveFromCart: this.handleRemoveFromCart.bind(this),\r\n      handleEmptyCart: this.handleEmptyCart.bind(this),\r\n      fetchCart: this.fetchCart.bind(this),\r\n      refreshCart: this.refreshCart.bind(this),\r\n      handleCaptureCheckout: this.handleCaptureCheckout.bind(this)\r\n    };\r\n\r\n\r\n  }\r\n\r\n  //Actions\r\n\r\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\r\n  loadOrderFromLocalStorage() {\r\n    if (window.localStorage.getItem('order_receipt')) {\r\n      this.setState({ order: JSON.parse(window.localStorage.getItem('order_receipt')) })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show hide cart in nav\r\n   */\r\n  toggleCart() {\r\n    const { isCartVisible } = this.state;\r\n    this.setState({\r\n      isCartVisible: !isCartVisible,\r\n    });\r\n  }\r\n\r\n  //-> start of cart functions\r\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\r\n  handleAddToCart(productId, quantity) {\r\n    commerce.cart.add(productId, quantity).then((item) => {\r\n      this.setState({ cart: item.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error adding the item to the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\r\n  handleUpdateCartQty(lineItemId, quantity) {\r\n    commerce.cart.update(lineItemId, { quantity }).then((resp) => {\r\n      this.setState({ cart: resp.cart })\r\n    }).catch((error) => {\r\n      console.log('There was an error updating the cart items', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\r\n  handleRemoveFromCart(lineItemId) {\r\n    commerce.cart.remove(lineItemId).then((resp) => {\r\n      this.setState({\r\n        cart: resp.cart\r\n      })\r\n    }).catch((error) => {\r\n      console.error('There was an error removing the item from the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\r\n  handleEmptyCart() {\r\n    commerce.cart.empty().then((resp) => {\r\n      this.setState({ cart: resp.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error emptying the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Retrieve the current cart or create one if one does not exist\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\r\n  fetchCart() {\r\n\r\n    cartAPI.get(\"/create\").then((cart) => {\r\n      console.log()\r\n      this.setState({ cart: cart });\r\n    }\r\n    ).catch((error) => console.error(error));\r\n\r\n    // commerce.cart.retrieve().then((cart) => {\r\n    //   this.setState({ cart: cart });\r\n    // }).catch((error) => {\r\n    //   console.error('There was an error fetching the cart', error);\r\n    // });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\r\n  refreshCart() {\r\n    commerce.cart.refresh().then((newCart) => {\r\n      this.setState({\r\n        cart: newCart,\r\n      })\r\n    }).catch((error) => {\r\n      console.log('There was an error refreshing your cart', error);\r\n    });\r\n  }\r\n  //=> end fo cart functions\r\n\r\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {string} checkoutTokenId The ID of the checkout token\r\n   * @param {object} newOrder The new order object data\r\n   */\r\n  handleCaptureCheckout(checkoutTokenId, newOrder) {\r\n\r\n    commerce.checkout.capture(checkoutTokenId, newOrder).then((order) => {\r\n\r\n      this.setState({\r\n        order: order,\r\n      });\r\n\r\n      // Store the order in session storage so we can show it again\r\n      // if the user refreshes the page!\r\n      window.localStorage.setItem('order_receipt', JSON.stringify(order));\r\n      // Clears the cart\r\n      this.refreshCart();\r\n      // Send the user to the receipt\r\n      this.props.history.push('/confirmation');\r\n    }).catch((error) => {\r\n      console.log('There was an error confirming your order', error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport { AppWrapper };\r\n\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}