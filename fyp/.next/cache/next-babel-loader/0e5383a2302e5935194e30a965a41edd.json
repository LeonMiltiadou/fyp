{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport commerce from '../lib/commerce';\nimport { AppContext } from '../context/state';\n\nvar Checkout = /*#__PURE__*/function (_Component) {\n  _inherits(Checkout, _Component);\n\n  var _super = _createSuper(Checkout);\n\n  function Checkout(props) {\n    var _this;\n\n    _classCallCheck(this, Checkout);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      checkoutToken: {},\n      // Customer details\n      firstName: 'Jane',\n      lastName: 'Doe',\n      email: 'janedoe@email.com',\n      // Shipping details\n      shippingName: 'Jane Doe',\n      shippingStreet: '123 Fake St',\n      shippingCity: '',\n      shippingStateProvince: '',\n      shippingPostalZipCode: '',\n      shippingCountry: '',\n      // Payment details\n      cardNum: '4242 4242 4242 4242',\n      expMonth: '11',\n      expYear: '2023',\n      ccv: '123',\n      billingPostalZipcode: '',\n      // Shipping and fulfillment data\n      shippingCountries: {},\n      shippingSubdivisions: {},\n      shippingOptions: [],\n      shippingOption: ''\n    };\n    _this.handleFormChanges = _this.handleFormChanges.bind(_assertThisInitialized(_this));\n    _this.handleShippingCountryChange = _this.handleShippingCountryChange.bind(_assertThisInitialized(_this));\n    _this.handleSubdivisionChange = _this.handleSubdivisionChange.bind(_assertThisInitialized(_this));\n    _this.handleCaptureCheckout = _this.handleCaptureCheckout.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Checkout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.generateCheckoutToken();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.shippingCountry !== prevState.shippingCountry) {\n        this.fetchShippingOptions(this.state.checkoutToken.id, this.state.shippingCountry);\n      }\n    }\n  }, {\n    key: \"generateCheckoutToken\",\n\n    /**\r\n     *  Generates a checkout token\r\n     *  https://commercejs.com/docs/sdk/checkout#generate-token\r\n     */\n    value: function generateCheckoutToken() {\n      var _this2 = this;\n\n      var cart = this.context.cart;\n\n      if (cart.line_items.length) {\n        return commerce.checkout.generateToken(cart.id, {\n          type: 'cart'\n        }).then(function (token) {\n          return _this2.setState({\n            checkoutToken: token\n          });\n        }).then(function () {\n          return _this2.fetchShippingCountries(_this2.state.checkoutToken.id);\n        }).catch(function (error) {\n          console.log('There was an error in generating a token', error);\n        });\n      }\n    }\n  }, {\n    key: \"fetchShippingCountries\",\n\n    /**\r\n     * Fetches a list of countries available to ship to checkout token\r\n     * https://commercejs.com/docs/sdk/checkout#list-available-shipping-countries\r\n     *\r\n     * @param {string} checkoutTokenId\r\n     */\n    value: function fetchShippingCountries(checkoutTokenId) {\n      var _this3 = this;\n\n      commerce.services.localeListShippingCountries(checkoutTokenId).then(function (countries) {\n        _this3.setState({\n          shippingCountries: countries.countries\n        });\n      }).catch(function (error) {\n        console.log('There was an error fetching a list of shipping countries', error);\n      });\n    }\n  }, {\n    key: \"fetchSubdivisions\",\n\n    /**\r\n     * Fetches the subdivisions (provinces/states) for a country\r\n     * https://commercejs.com/docs/sdk/checkout#list-all-subdivisions-for-a-country\r\n     *\r\n     * @param {string} countryCode\r\n     */\n    value: function fetchSubdivisions(countryCode) {\n      var _this4 = this;\n\n      commerce.services.localeListSubdivisions(countryCode).then(function (subdivisions) {\n        _this4.setState({\n          shippingSubdivisions: subdivisions.subdivisions\n        });\n      }).catch(function (error) {\n        console.log('There was an error fetching the subdivisions', error);\n      });\n    }\n  }, {\n    key: \"fetchShippingOptions\",\n\n    /**\r\n     * Fetches the available shipping methods for the current checkout\r\n     * https://commercejs.com/docs/sdk/checkout#get-shipping-methods\r\n     *\r\n     * @param {string} checkoutTokenId\r\n     * @param {string} country\r\n     * @param {string} stateProvince\r\n     */\n    value: function fetchShippingOptions(checkoutTokenId, country) {\n      var _this5 = this;\n\n      var stateProvince = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      commerce.checkout.getShippingOptions(checkoutTokenId, {\n        country: country,\n        region: stateProvince\n      }).then(function (options) {\n        // Pre-select the first available method\n        var shippingOption = options[0] || null;\n\n        _this5.setState({\n          shippingOption: shippingOption,\n          shippingOptions: options\n        });\n      }).catch(function (error) {\n        console.log('There was an error fetching the shipping methods', error);\n      });\n    }\n  }, {\n    key: \"handleFormChanges\",\n    value: function handleFormChanges(e) {\n      this.setState(_defineProperty({}, e.target.name, e.target.value));\n    }\n  }, {\n    key: \"handleShippingCountryChange\",\n    value: function handleShippingCountryChange(e) {\n      var currentValue = e.target.value;\n      this.fetchSubdivisions(currentValue);\n    }\n  }, {\n    key: \"handleSubdivisionChange\",\n    value: function handleSubdivisionChange(e) {\n      var currentValue = e.target.value;\n      this.fetchShippingOptions(this.state.checkoutToken.id, this.state.shippingCountry, currentValue);\n    }\n  }, {\n    key: \"handleCaptureCheckout\",\n    value: function handleCaptureCheckout(e) {\n      e.preventDefault();\n      var orderData = {\n        line_items: this.state.checkoutToken.live.line_items,\n        customer: {\n          firstname: this.state.firstName,\n          lastname: this.state.lastName,\n          email: this.state.email\n        },\n        shipping: {\n          name: this.state.shippingName,\n          street: this.state.shippingStreet,\n          town_city: this.state.shippingCity,\n          county_state: this.state.shippingStateProvince,\n          postal_zip_code: this.state.shippingPostalZipCode,\n          country: this.state.shippingCountry\n        },\n        fulfillment: {\n          shipping_method: this.state.shippingOption.id\n        },\n        payment: {\n          gateway: \"test_gateway\",\n          card: {\n            number: this.state.cardNum,\n            expiry_month: this.state.expMonth,\n            expiry_year: this.state.expYear,\n            cvc: this.state.ccv,\n            postal_zip_code: this.state.billingPostalZipcode\n          }\n        }\n      };\n      this.context.handleCaptureCheckout(this.state.checkoutToken.id, orderData);\n    }\n  }, {\n    key: \"renderCheckoutForm\",\n    value: function renderCheckoutForm() {\n      var _this$state = this.state,\n          shippingCountries = _this$state.shippingCountries,\n          shippingSubdivisions = _this$state.shippingSubdivisions,\n          shippingOptions = _this$state.shippingOptions;\n      return __jsx(\"form\", {\n        className: \"checkout__form\",\n        onChange: this.handleFormChanges\n      }, __jsx(\"h4\", {\n        className: \"checkout__subheading\"\n      }, \"Customer information\"), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"firstName\"\n      }, \"First name\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        onChange: this.handleFormChanges,\n        value: this.state.firstName,\n        name: \"firstName\",\n        placeholder: \"Enter your first name\",\n        required: true\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"lastName\"\n      }, \"Last name\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        onChange: this.handleFormChanges,\n        value: this.state.lastName,\n        name: \"lastName\",\n        placeholder: \"Enter your last name\",\n        required: true\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"email\"\n      }, \"Email\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        onChange: this.handleFormChanges,\n        value: this.state.email,\n        name: \"email\",\n        placeholder: \"Enter your email\",\n        required: true\n      }), __jsx(\"h4\", {\n        className: \"checkout__subheading\"\n      }, \"Shipping details\"), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"shippingName\"\n      }, \"Full name\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        onChange: this.handleFormChanges,\n        value: this.state.shippingName,\n        name: \"shippingName\",\n        placeholder: \"Enter your shipping full name\",\n        required: true\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"shippingStreet\"\n      }, \"Street address\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        onChange: this.handleFormChanges,\n        value: this.state.shippingStreet,\n        name: \"shippingStreet\",\n        placeholder: \"Enter your street address\",\n        required: true\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"shippingCity\"\n      }, \"City\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        onChange: this.handleFormChanges,\n        value: this.state.shippingCity,\n        name: \"shippingCity\",\n        placeholder: \"Enter your city\",\n        required: true\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"shippingPostalZipCode\"\n      }, \"Postal/Zip code\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        onChange: this.handleFormChanges,\n        value: this.state.shippingPostalZipCode,\n        name: \"shippingPostalZipCode\",\n        placeholder: \"Enter your postal/zip code\",\n        required: true\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"shippingCountry\"\n      }, \"Country\"), __jsx(\"select\", {\n        value: this.state.shippingCountry,\n        name: \"shippingCountry\",\n        onChange: this.handleShippingCountryChange,\n        className: \"checkout__select\"\n      }, __jsx(\"option\", {\n        disabled: true\n      }, \"Country\"), Object.keys(shippingCountries).map(function (index) {\n        return __jsx(\"option\", {\n          value: index,\n          key: index\n        }, shippingCountries[index]);\n      }), \";\"), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"shippingStateProvince\"\n      }, \"State/province\"), __jsx(\"select\", {\n        value: this.state.shippingStateProvince,\n        name: \"shippingStateProvince\",\n        onChange: this.handleSubdivisionChange,\n        className: \"checkout__select\"\n      }, __jsx(\"option\", {\n        className: \"checkout__option\",\n        disabled: true\n      }, \"State/province\"), Object.keys(shippingSubdivisions).map(function (index) {\n        return __jsx(\"option\", {\n          value: index,\n          key: index\n        }, shippingSubdivisions[index]);\n      }), \";\"), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"shippingOption\"\n      }, \"Shipping method\"), __jsx(\"select\", {\n        value: this.state.shippingOption.id,\n        name: \"shippingOption\",\n        onChange: this.handleFormChanges,\n        className: \"checkout__select\"\n      }, __jsx(\"option\", {\n        className: \"checkout__select-option\",\n        disabled: true\n      }, \"Select a shipping method\"), shippingOptions.map(function (method, index) {\n        return __jsx(\"option\", {\n          className: \"checkout__select-option\",\n          value: method.id,\n          key: index\n        }, \"\".concat(method.description, \" - $\").concat(method.price.formatted_with_code));\n      }), \";\"), __jsx(\"h4\", {\n        className: \"checkout__subheading\"\n      }, \"Payment information\"), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"cardNum\"\n      }, \"Credit card number\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        name: \"cardNum\",\n        onChange: this.handleFormChanges,\n        value: this.state.cardNum,\n        placeholder: \"Enter your card number\"\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"expMonth\"\n      }, \"Expiry month\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        name: \"expMonth\",\n        onChange: this.handleFormChanges,\n        value: this.state.expMonth,\n        placeholder: \"Card expiry month\"\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"expYear\"\n      }, \"Expiry year\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        name: \"expYear\",\n        onChange: this.handleFormChanges,\n        value: this.state.expYear,\n        placeholder: \"Card expiry year\"\n      }), __jsx(\"label\", {\n        className: \"checkout__label\",\n        htmlFor: \"ccv\"\n      }, \"CCV\"), __jsx(\"input\", {\n        className: \"checkout__input\",\n        type: \"text\",\n        name: \"ccv\",\n        onChange: this.handleFormChanges,\n        value: this.state.ccv,\n        placeholder: \"CCV (3 digits)\"\n      }), __jsx(\"button\", {\n        onClick: this.handleCaptureCheckout,\n        className: \"checkout__btn-confirm\"\n      }, \"Confirm order\"));\n    }\n  }, {\n    key: \"renderCheckoutSummary\",\n    value: function renderCheckoutSummary() {\n      var cart = this.context.cart;\n\n      if (Object.keys(cart).length > 0) {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"checkout__summary\"\n        }, __jsx(\"h4\", null, \"Order summary\"), cart.line_items.map(function (lineItem) {\n          return __jsx(React.Fragment, null, __jsx(\"div\", {\n            key: lineItem.id,\n            className: \"checkout__summary-details\"\n          }, __jsx(\"img\", {\n            className: \"checkout__summary-img\",\n            src: lineItem.media.source,\n            alt: lineItem.name\n          }), __jsx(\"p\", {\n            className: \"checkout__summary-name\"\n          }, lineItem.quantity, \" x \", lineItem.name), __jsx(\"p\", {\n            className: \"checkout__summary-value\"\n          }, lineItem.line_total.formatted_with_symbol)));\n        }), __jsx(\"div\", {\n          className: \"checkout__summary-total\"\n        }, __jsx(\"p\", {\n          className: \"checkout__summary-price\"\n        }, __jsx(\"span\", null, \"Subtotal:\"), cart.subtotal.formatted_with_symbol))));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"checkout\"\n      }, __jsx(\"h2\", {\n        className: \"checkout__heading\"\n      }, \"Checkout\"), __jsx(\"div\", {\n        className: \"checkout__wrapper\"\n      }, this.renderCheckoutForm(), this.renderCheckoutSummary()));\n    }\n  }]);\n\n  return Checkout;\n}(Component);\n\n_defineProperty(Checkout, \"contextType\", AppContext);\n\n;\nexport default Checkout;","map":null,"metadata":{},"sourceType":"module"}