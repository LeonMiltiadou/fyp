{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KGM\\\\OneDrive\\\\Documents\\\\GitHub\\\\chec\\\\fyp\\\\context\\\\state.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { createContext } from 'react';\nimport React, { Component } from \"react\";\nexport const AppContext = /*#__PURE__*/createContext();\n\nclass AppWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      order: {},\n      cart: {},\n      isCartVisible: false,\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage,\n      toggleCart: this.toggleCart,\n      handleAddToCart: this.handleAddToCart,\n      handleUpdateCartQty: this.handleUpdateCartQty,\n      handleRemoveFromCart: this.handleRemoveFromCart,\n      handleEmptyCart: this.handleEmptyCart,\n      fetchCart: this.fetchCart,\n      refreshCart: this.refreshCart\n    };\n  } //Actions\n\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\n\n\n  loadOrderFromLocalStorage() {\n    if (window.localStorage.getItem('order_receipt')) {\n      this.setState({\n        order: JSON.parse(window.localStorage.getItem('order_receipt'))\n      });\n    }\n  }\n  /**\r\n   * Show hide cart in nav\r\n   */\n\n\n  toggleCart() {\n    const {\n      isCartVisible\n    } = this.state;\n    this.setState({\n      isCartVisible: !isCartVisible\n    });\n  }\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\n\n\n  handleAddToCart(productId, quantity) {\n    commerce.cart.add(productId, quantity).then(item => {\n      this.setState({\n        cart: item.cart\n      });\n    }).catch(error => {\n      console.error('There was an error adding the item to the cart', error);\n    });\n  }\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\n\n\n  handleUpdateCartQty(lineItemId, quantity) {\n    commerce.cart.update(lineItemId, {\n      quantity\n    }).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.log('There was an error updating the cart items', error);\n    });\n  }\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\n\n\n  handleRemoveFromCart(lineItemId) {\n    commerce.cart.remove(lineItemId).then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error removing the item from the cart', error);\n    });\n  }\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\n\n\n  handleEmptyCart() {\n    commerce.cart.empty().then(resp => {\n      this.setState({\n        cart: resp.cart\n      });\n    }).catch(error => {\n      console.error('There was an error emptying the cart', error);\n    });\n  }\n  /**\r\n  * Retrieve the current cart or create one if one does not exist\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\n\n\n  fetchCart() {\n    commerce.cart.retrieve().then(cart => {\n      this.setState({\n        cart: cart\n      });\n    }).catch(error => {\n      console.error('There was an error fetching the cart', error);\n    });\n  }\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\n\n\n  refreshCart() {\n    commerce.cart.refresh().then(newCart => {\n      this.setState({\n        cart: newCart\n      });\n    }).catch(error => {\n      console.log('There was an error refreshing your cart', error);\n    });\n  }\n\n  render() {\n    return __jsx(AppContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport { AppWrapper };\nexport function useAppContext() {\n  _s();\n\n  return useContext(AppContext);\n}\n\n_s(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");","map":{"version":3,"sources":["C:/Users/KGM/OneDrive/Documents/GitHub/chec/fyp/context/state.js"],"names":["createContext","React","Component","AppContext","AppWrapper","constructor","state","order","cart","isCartVisible","loadOrderFromLocalStorage","toggleCart","handleAddToCart","handleUpdateCartQty","handleRemoveFromCart","handleEmptyCart","fetchCart","refreshCart","window","localStorage","getItem","setState","JSON","parse","productId","quantity","commerce","add","then","item","catch","error","console","lineItemId","update","resp","log","remove","empty","retrieve","refresh","newCart","render","useAppContext","useContext"],"mappings":"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","sourcesContent":["import { createContext } from 'react';\r\nimport React, { Component } from \"react\"\r\n\r\n\r\nexport const AppContext = createContext();\r\n\r\n\r\n\r\n\r\nclass AppWrapper extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      order: {},\r\n      cart: {},\r\n      isCartVisible: false,\r\n      loadOrderFromLocalStorage : this.loadOrderFromLocalStorage,\r\n      toggleCart : this.toggleCart,\r\n      handleAddToCart : this.handleAddToCart,\r\n      handleUpdateCartQty : this.handleUpdateCartQty,\r\n      handleRemoveFromCart : this.handleRemoveFromCart,\r\n      handleEmptyCart : this.handleEmptyCart,\r\n      fetchCart : this.fetchCart,\r\n      refreshCart : this.refreshCart\r\n    };\r\n  }\r\n\r\n  //Actions\r\n\r\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\r\n  loadOrderFromLocalStorage() {\r\n    if (window.localStorage.getItem('order_receipt')) {\r\n      this.setState({ order: JSON.parse(window.localStorage.getItem('order_receipt')) })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show hide cart in nav\r\n   */\r\n  toggleCart() {\r\n    const { isCartVisible } = this.state;\r\n    this.setState({\r\n      isCartVisible: !isCartVisible,\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\r\n  handleAddToCart(productId, quantity) {\r\n    commerce.cart.add(productId, quantity).then((item) => {\r\n      this.setState({ cart: item.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error adding the item to the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\r\n  handleUpdateCartQty(lineItemId, quantity) {\r\n    commerce.cart.update(lineItemId, { quantity }).then((resp) => {\r\n      this.setState({ cart: resp.cart })\r\n    }).catch((error) => {\r\n      console.log('There was an error updating the cart items', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\r\n  handleRemoveFromCart(lineItemId) {\r\n    commerce.cart.remove(lineItemId).then((resp) => {\r\n      this.setState({\r\n        cart: resp.cart\r\n      })\r\n    }).catch((error) => {\r\n      console.error('There was an error removing the item from the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\r\n  handleEmptyCart() {\r\n    commerce.cart.empty().then((resp) => {\r\n      this.setState({ cart: resp.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error emptying the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Retrieve the current cart or create one if one does not exist\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\r\n  fetchCart() {\r\n    commerce.cart.retrieve().then((cart) => {\r\n      this.setState({ cart: cart });\r\n    }).catch((error) => {\r\n      console.error('There was an error fetching the cart', error);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\r\n  refreshCart() {\r\n    commerce.cart.refresh().then((newCart) => {\r\n      this.setState({\r\n        cart: newCart,\r\n      })\r\n    }).catch((error) => {\r\n      console.log('There was an error refreshing your cart', error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={this.state}>\r\n      </AppContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport { AppWrapper };\r\n\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}