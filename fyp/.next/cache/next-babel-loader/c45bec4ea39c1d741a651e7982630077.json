{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\KGM\\\\OneDrive\\\\Documents\\\\GitHub\\\\chec\\\\fyp\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport commerce from '../lib/commerce';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faShoppingBag, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport { AppContext } from '../context/state.js';\nimport Hero from '../components/Hero';\nimport ProductsList from '../components/ProductsList';\nimport Cart from '../components/Cart';\nlibrary.add(faShoppingBag, faTimes);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      merchant: {},\n      products: []\n    }; // this.handleAddToCart = this.handleAddToCart.bind(this);\n    // this.handleUpdateCartQty = this.handleUpdateCartQty.bind(this);\n    // this.handleRemoveFromCart = this.handleRemoveFromCart.bind(this);\n    // this.handleEmptyCart = this.handleEmptyCart.bind(this);\n    // this.toggleCart = this.toggleCart.bind(this);\n    // this.handleCaptureCheckout = this.handleCaptureCheckout.bind(this);\n    // this.refreshCart = this.refreshCart.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMerchantDetails(); // this.fetchProducts();\n    // this.context.fetchCart();\n    // this.context.loadOrderFromLocalStorage();\n  }\n  /**\r\n   * Fetch merchant details\r\n   * https://commercejs.com/docs/sdk/full-sdk-reference#merchants\r\n   */\n\n\n  fetchMerchantDetails() {\n    commerce.merchants.about().then(merchant => {\n      this.setState({\n        merchant: merchant\n      });\n    }).catch(error => {\n      console.log('There was an error fetch the merchant details', error);\n    });\n  }\n  /**\r\n   * Fetch products data from Chec and stores in the products data object.\r\n   * https://commercejs.com/docs/sdk/products\r\n   */\n\n\n  fetchProducts() {\n    commerce.products.list().then(products => {\n      this.setState({\n        products: products.data\n      });\n    }).catch(error => {\n      console.log('There was an error fetching the products', error);\n    });\n  }\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {string} checkoutTokenId The ID of the checkout token\r\n   * @param {object} newOrder The new order object data\r\n   */\n\n\n  handleCaptureCheckout(checkoutTokenId, newOrder) {\n    commerce.checkout.capture(checkoutTokenId, newOrder).then(order => {\n      this.setState({\n        order: order\n      }); // Store the order in session storage so we can show it again\n      // if the user refreshes the page!\n\n      window.localStorage.setItem('order_receipt', JSON.stringify(order)); // Clears the cart\n\n      this.refreshCart(); // Send the user to the receipt\n\n      this.props.history.push('/confirmation');\n    }).catch(error => {\n      console.log('There was an error confirming your order', error);\n    });\n  }\n\n  renderCartNav() {\n    const {\n      cart,\n      isCartVisible\n    } = this.context;\n    return __jsx(\"div\", {\n      className: \"nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"nav__cart\",\n      onClick: this.toggleCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, !isCartVisible ? __jsx(\"button\", {\n      className: \"nav__cart-open\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, __jsx(FontAwesomeIcon, {\n      size: \"2x\",\n      icon: \"shopping-bag\",\n      color: \"#292B83\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }), cart !== null ? __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 32\n      }\n    }, cart.total_items) : '') : __jsx(\"button\", {\n      className: \"nav__cart-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, __jsx(FontAwesomeIcon, {\n      size: \"1x\",\n      icon: \"times\",\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }))));\n  }\n\n  render() {\n    const {\n      products,\n      merchant,\n      cart,\n      isCartVisible,\n      order\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, __jsx(React.Fragment, null, __jsx(Hero, {\n      merchant: merchant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }), this.renderCartNav(), isCartVisible && __jsx(Cart, _extends({}, this.props, {\n      cart: cart,\n      onUpdateCartQty: this.handleUpdateCartQty,\n      onRemoveFromCart: this.handleRemoveFromCart,\n      onEmptyCart: this.handleEmptyCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    })), __jsx(ProductsList, _extends({}, this.props, {\n      products: products,\n      onAddToCart: this.handleAddToCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\n_defineProperty(App, \"contextType\", AppContext);\n\n;\nexport default App;\nApp.propTypes = {\n  history: PropTypes.object\n};\nApp.contextType = AppContext;","map":{"version":3,"sources":["C:/Users/KGM/OneDrive/Documents/GitHub/chec/fyp/pages/index.js"],"names":["React","Component","commerce","FontAwesomeIcon","library","faShoppingBag","faTimes","PropTypes","AppContext","Hero","ProductsList","Cart","add","App","constructor","props","state","merchant","products","componentDidMount","fetchMerchantDetails","merchants","about","then","setState","catch","error","console","log","fetchProducts","list","data","handleCaptureCheckout","checkoutTokenId","newOrder","checkout","capture","order","window","localStorage","setItem","JSON","stringify","refreshCart","history","push","renderCartNav","cart","isCartVisible","context","toggleCart","total_items","render","handleUpdateCartQty","handleRemoveFromCart","handleEmptyCart","handleAddToCart","propTypes","object","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport commerce from '../lib/commerce';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faShoppingBag, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport PropTypes from 'prop-types';\r\nimport {AppContext} from '../context/state.js'\r\n\r\nimport Hero from '../components/Hero';\r\nimport ProductsList from '../components/ProductsList';\r\nimport Cart from '../components/Cart';\r\n\r\nlibrary.add(faShoppingBag, faTimes)\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      merchant: {}, \r\n      products: [],\r\n    }\r\n\r\n    // this.handleAddToCart = this.handleAddToCart.bind(this);\r\n    // this.handleUpdateCartQty = this.handleUpdateCartQty.bind(this);\r\n    // this.handleRemoveFromCart = this.handleRemoveFromCart.bind(this);\r\n    // this.handleEmptyCart = this.handleEmptyCart.bind(this);\r\n    // this.toggleCart = this.toggleCart.bind(this);\r\n    // this.handleCaptureCheckout = this.handleCaptureCheckout.bind(this);\r\n    // this.refreshCart = this.refreshCart.bind(this);\r\n  }\r\n\r\n  static contextType = AppContext;\r\n\r\n  componentDidMount() {\r\n    this.fetchMerchantDetails();\r\n    // this.fetchProducts();\r\n    // this.context.fetchCart();\r\n    // this.context.loadOrderFromLocalStorage();\r\n  }\r\n\r\n  /**\r\n   * Fetch merchant details\r\n   * https://commercejs.com/docs/sdk/full-sdk-reference#merchants\r\n   */\r\n  fetchMerchantDetails() {\r\n    commerce.merchants.about().then((merchant) => {\r\n      this.setState({ merchant: merchant });\r\n    }).catch((error) => {\r\n      console.log('There was an error fetch the merchant details', error)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch products data from Chec and stores in the products data object.\r\n   * https://commercejs.com/docs/sdk/products\r\n   */\r\n  fetchProducts() {\r\n    commerce.products.list().then((products) => {\r\n      this.setState({ products: products.data });\r\n    }).catch((error) => {\r\n      console.log('There was an error fetching the products', error);\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {string} checkoutTokenId The ID of the checkout token\r\n   * @param {object} newOrder The new order object data\r\n   */\r\n  handleCaptureCheckout(checkoutTokenId, newOrder) {\r\n\r\n    commerce.checkout.capture(checkoutTokenId, newOrder).then((order) => {\r\n\r\n      this.setState({\r\n        order: order,\r\n      });\r\n      // Store the order in session storage so we can show it again\r\n      // if the user refreshes the page!\r\n      window.localStorage.setItem('order_receipt', JSON.stringify(order));\r\n      // Clears the cart\r\n      this.refreshCart();\r\n      // Send the user to the receipt\r\n      this.props.history.push('/confirmation');\r\n    }).catch((error) => {\r\n      console.log('There was an error confirming your order', error);\r\n    });\r\n  }\r\n\r\n  renderCartNav() {\r\n    const { cart, isCartVisible } = this.context;\r\n\r\n    return (\r\n      <div className=\"nav\">\r\n        <div className=\"nav__cart\" onClick={this.toggleCart}>\r\n          {!isCartVisible ? (\r\n            <button className=\"nav__cart-open\">\r\n              <FontAwesomeIcon size=\"2x\" icon=\"shopping-bag\" color=\"#292B83\" />\r\n              {cart !== null ? <span>{cart.total_items}</span> : ''}\r\n            </button>\r\n          ) : (\r\n              <button className=\"nav__cart-close\">\r\n                <FontAwesomeIcon size=\"1x\" icon=\"times\" color=\"white\" />\r\n              </button>\r\n            )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      products,\r\n      merchant,\r\n      cart,\r\n      isCartVisible,\r\n      order\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <>\r\n          <Hero\r\n            merchant={merchant}\r\n          />\r\n          { this.renderCartNav()}\r\n          {isCartVisible &&\r\n            <Cart\r\n              {...this.props}\r\n              cart={cart}\r\n              onUpdateCartQty={this.handleUpdateCartQty}\r\n              onRemoveFromCart={this.handleRemoveFromCart}\r\n              onEmptyCart={this.handleEmptyCart}\r\n            />\r\n          }\r\n          <ProductsList\r\n            {...this.props}\r\n            products={products}\r\n            onAddToCart={this.handleAddToCart}\r\n          />\r\n        </>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n\r\nApp.propTypes = {\r\n  history: PropTypes.object,\r\n};\r\n\r\nApp.contextType = AppContext;"]},"metadata":{},"sourceType":"module"}