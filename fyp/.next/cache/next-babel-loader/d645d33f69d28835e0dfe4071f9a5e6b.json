{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { createContext } from 'react';\nimport React, { Component } from \"react\";\nimport commerce from '../lib/commerce';\nimport orderData from './testdata';\nexport var AppContext = /*#__PURE__*/createContext();\n\nvar AppWrapper = /*#__PURE__*/function (_Component) {\n  _inherits(AppWrapper, _Component);\n\n  var _super = _createSuper(AppWrapper);\n\n  function AppWrapper() {\n    var _this;\n\n    _classCallCheck(this, AppWrapper);\n\n    _this = _super.call(this);\n    _this.state = {\n      order: orderData,\n      cart: {},\n      isCartVisible: false,\n      loadOrderFromLocalStorage: _this.loadOrderFromLocalStorage.bind(_assertThisInitialized(_this)),\n      toggleCart: _this.toggleCart.bind(_assertThisInitialized(_this)),\n      handleAddToCart: _this.handleAddToCart.bind(_assertThisInitialized(_this)),\n      handleUpdateCartQty: _this.handleUpdateCartQty.bind(_assertThisInitialized(_this)),\n      handleRemoveFromCart: _this.handleRemoveFromCart.bind(_assertThisInitialized(_this)),\n      handleEmptyCart: _this.handleEmptyCart.bind(_assertThisInitialized(_this)),\n      fetchCart: _this.fetchCart.bind(_assertThisInitialized(_this)),\n      refreshCart: _this.refreshCart.bind(_assertThisInitialized(_this)),\n      handleCaptureCheckout: _this.handleCaptureCheckout.bind(_assertThisInitialized(_this))\n    };\n    return _this;\n  } //Actions\n\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\n\n\n  _createClass(AppWrapper, [{\n    key: \"loadOrderFromLocalStorage\",\n    value: function loadOrderFromLocalStorage() {\n      if (window.localStorage.getItem('order_receipt')) {\n        this.setState({\n          order: JSON.parse(window.localStorage.getItem('order_receipt'))\n        });\n      }\n    }\n    /**\r\n     * Show hide cart in nav\r\n     */\n\n  }, {\n    key: \"toggleCart\",\n    value: function toggleCart() {\n      var isCartVisible = this.state.isCartVisible;\n      this.setState({\n        isCartVisible: !isCartVisible\n      });\n    }\n    /**\r\n     * Adds a product to the current cart in session\r\n     * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n     *\r\n     * @param {string} productId The ID of the product being added\r\n     * @param {number} quantity The quantity of the product being added\r\n     */\n\n  }, {\n    key: \"handleAddToCart\",\n    value: function handleAddToCart(productId, quantity) {\n      var _this2 = this;\n\n      commerce.cart.add(productId, quantity).then(function (item) {\n        _this2.setState({\n          cart: item.cart\n        });\n      }).catch(function (error) {\n        console.error('There was an error adding the item to the cart', error);\n      });\n    }\n    /**\r\n     * Updates line_items in cart\r\n     * https://commercejs.com/docs/sdk/cart/#update-cart\r\n     *\r\n     * @param {string} lineItemId ID of the cart line item being updated\r\n     * @param {number} quantity New line item quantity to update\r\n     */\n\n  }, {\n    key: \"handleUpdateCartQty\",\n    value: function handleUpdateCartQty(lineItemId, quantity) {\n      var _this3 = this;\n\n      commerce.cart.update(lineItemId, {\n        quantity: quantity\n      }).then(function (resp) {\n        _this3.setState({\n          cart: resp.cart\n        });\n      }).catch(function (error) {\n        console.log('There was an error updating the cart items', error);\n      });\n    }\n    /**\r\n     * Removes line item from cart\r\n     * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n     *\r\n     * @param {string} lineItemId ID of the line item being removed\r\n     */\n\n  }, {\n    key: \"handleRemoveFromCart\",\n    value: function handleRemoveFromCart(lineItemId) {\n      var _this4 = this;\n\n      commerce.cart.remove(lineItemId).then(function (resp) {\n        _this4.setState({\n          cart: resp.cart\n        });\n      }).catch(function (error) {\n        console.error('There was an error removing the item from the cart', error);\n      });\n    }\n    /**\r\n     * Empties cart contents\r\n     * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n     */\n\n  }, {\n    key: \"handleEmptyCart\",\n    value: function handleEmptyCart() {\n      var _this5 = this;\n\n      commerce.cart.empty().then(function (resp) {\n        _this5.setState({\n          cart: resp.cart\n        });\n      }).catch(function (error) {\n        console.error('There was an error emptying the cart', error);\n      });\n    }\n    /**\r\n    * Retrieve the current cart or create one if one does not exist\r\n    * https://commercejs.com/docs/sdk/cart\r\n    */\n\n  }, {\n    key: \"fetchCart\",\n    value: function fetchCart() {\n      var _this6 = this;\n\n      commerce.cart.retrieve().then(function (cart) {\n        _this6.setState({\n          cart: cart\n        });\n      }).catch(function (error) {\n        console.error('There was an error fetching the cart', error);\n      });\n    }\n    /**\r\n     * Refreshes to a new cart\r\n     * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n     */\n\n  }, {\n    key: \"refreshCart\",\n    value: function refreshCart() {\n      var _this7 = this;\n\n      commerce.cart.refresh().then(function (newCart) {\n        _this7.setState({\n          cart: newCart\n        });\n      }).catch(function (error) {\n        console.log('There was an error refreshing your cart', error);\n      });\n    }\n    /**\r\n     * Captures the checkout\r\n     * https://commercejs.com/docs/sdk/checkout#capture-order\r\n     *\r\n     * @param {string} checkoutTokenId The ID of the checkout token\r\n     * @param {object} newOrder The new order object data\r\n     */\n\n  }, {\n    key: \"handleCaptureCheckout\",\n    value: function handleCaptureCheckout(checkoutTokenId, newOrder) {\n      var _this8 = this;\n\n      commerce.checkout.capture(checkoutTokenId, newOrder).then(function (order) {\n        _this8.setState({\n          order: order\n        }); // Store the order in session storage so we can show it again\n        // if the user refreshes the page!\n\n\n        window.localStorage.setItem('order_receipt', JSON.stringify(order)); // Clears the cart\n\n        _this8.refreshCart(); // Send the user to the receipt\n\n\n        _this8.props.history.push('/confirmation');\n      }).catch(function (error) {\n        console.log('There was an error confirming your order', error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(AppContext.Provider, {\n        value: this.state\n      }, this.props.children);\n    }\n  }]);\n\n  return AppWrapper;\n}(Component);\n\nexport { AppWrapper };\nexport function useAppContext() {\n  return useContext(AppContext);\n}","map":null,"metadata":{},"sourceType":"module"}