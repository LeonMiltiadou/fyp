{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KGM\\\\OneDrive\\\\Documents\\\\GitHub\\\\chec\\\\fyp\\\\pages\\\\myaccount.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This import is only included in the server build, because it's only used by getServerSideProps\nimport { Component } from 'react';\nimport auth0 from '../lib/auth0';\nimport { AppContext } from '../context/state.js';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    let {\n      user\n    } = this.props;\n    return __jsx(\"div\", {\n      className: \"myaccount-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"myaccount-nav-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \"My Account\"), __jsx(\"div\", {\n      className: \"myaccount-nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"account-details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }\n    }, \"Profile (server rendered)\"), __jsx(\"img\", {\n      src: user.picture,\n      alt: \"user picture\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, \"nickname: \", user.nickname), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, \"name: \", user.name)));\n  }\n\n}\n\n_defineProperty(Profile, \"contextType\", AppContext);\n\nasync function listOrdersForCustomer(customerID) {\n  try {\n    const ordermanagementAPI = axios.create({\n      baseURL: process.env.ORDERMANAGEMENTMSURL,\n      timeout: 3000,\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return await ordermanagementAPI.get(\"/listorders/\" + customerID).then(orders => {\n      return orders.data; // Add returns for other catch \n    }).catch(error => {\n      console.log('There was an error retrieving a list of orders for the customer', error);\n      return null;\n    });\n  } catch (error) {\n    console.error('There was an error retrieving a list of orders for the customer' + customerID, error);\n    return null;\n  }\n}\n\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  // Here you can check authentication status directly before rendering the page,\n  // however the page would be a serverless function, which is more expensive and\n  // slower than a static page with client side authentication\n  const x = 5;\n  const session = await auth0.getSession(req, res);\n\n  if (!session || !session.user) {\n    res.writeHead(302, {\n      Location: '/api/login'\n    });\n    res.end();\n    return;\n  }\n\n  user = this.context.getUser(session.user.sub);\n  const orders = await listOrdersForCustomer(session);\n  return {\n    props: {\n      user: session.user,\n      orders: orders\n    }\n  };\n}\nexport default Profile;","map":{"version":3,"sources":["C:/Users/KGM/OneDrive/Documents/GitHub/chec/fyp/pages/myaccount.js"],"names":["Component","auth0","AppContext","Profile","constructor","props","state","render","user","picture","nickname","name","listOrdersForCustomer","customerID","ordermanagementAPI","axios","create","baseURL","process","env","ORDERMANAGEMENTMSURL","timeout","headers","get","then","orders","data","catch","error","console","log","getServerSideProps","req","res","x","session","getSession","writeHead","Location","end","context","getUser","sub"],"mappings":"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","sourcesContent":["// This import is only included in the server build, because it's only used by getServerSideProps\r\nimport { Component } from 'react';\r\nimport auth0 from '../lib/auth0'\r\n\r\nimport { AppContext } from '../context/state.js';\r\n\r\nclass Profile extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    }\r\n  }\r\n  static contextType = AppContext;\r\n\r\n  render() {\r\n    let { user } = this.props;\r\n    return (\r\n      <div className=\"myaccount-page\">\r\n\r\n        <div className=\"myaccount-nav-title\">My Account</div>\r\n        <div className=\"myaccount-nav\"></div>\r\n\r\n        <div className=\"account-details\">\r\n          <h3>Profile (server rendered)</h3>\r\n          <img src={user.picture} alt=\"user picture\" />\r\n          <p>nickname: {user.nickname}</p>\r\n          <p>name: {user.name}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nasync function listOrdersForCustomer(customerID) {\r\n  try {\r\n    const ordermanagementAPI = axios.create({\r\n      baseURL: process.env.ORDERMANAGEMENTMSURL,\r\n      timeout: 3000,\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    });\r\n    return await ordermanagementAPI.get(\"/listorders/\" + customerID).then((orders) => {\r\n\r\n      return orders.data; // Add returns for other catch \r\n\r\n    }).catch((error) => {\r\n      console.log('There was an error retrieving a list of orders for the customer', error);\r\n      return null;\r\n    });\r\n  } catch (error) {\r\n    console.error('There was an error retrieving a list of orders for the customer' + customerID, error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getServerSideProps({ req, res }) {\r\n  // Here you can check authentication status directly before rendering the page,\r\n  // however the page would be a serverless function, which is more expensive and\r\n  // slower than a static page with client side authentication\r\n  const x = 5;\r\n  const session = await auth0.getSession(req, res)\r\n\r\n  if (!session || !session.user) {\r\n    res.writeHead(302, {\r\n      Location: '/api/login',\r\n    })\r\n    res.end()\r\n    return\r\n  }\r\n  user = this.context.getUser(session.user.sub);\r\n  const orders = await listOrdersForCustomer(session);\r\n  return { props: { user: session.user, orders: orders } }\r\n}\r\n\r\nexport default Profile\r\n"]},"metadata":{},"sourceType":"module"}