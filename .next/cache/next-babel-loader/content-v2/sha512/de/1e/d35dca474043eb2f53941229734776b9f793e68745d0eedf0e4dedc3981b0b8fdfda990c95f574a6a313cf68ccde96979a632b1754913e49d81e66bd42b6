{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KGM\\\\OneDrive\\\\Documents\\\\GitHub\\\\chec\\\\fyp\\\\context\\\\state.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { createContext } from 'react';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport Router from 'next/router';\nexport const AppContext = /*#__PURE__*/createContext();\nconst cartAPI = axios.create({\n  baseURL: process.env.CARTMSURL,\n  timeout: 3000,\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nconst productAPI = axios.create({\n  baseURL: process.env.PRODUCTSMSURL,\n  timeout: 3000,\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nconst ordermanagementAPI = axios.create({\n  baseURL: process.env.ORDERMANAGEMENTMSURL,\n  timeout: 3000,\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nclass AppWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cartID: \"\",\n      order: {\n        customer: {\n          firstname: \"\"\n        }\n      },\n      cart: {\n        line_items: [{\n          media: {\n            source: \"\"\n          },\n          line_total: {\n            formatted_with_symbol: \"\"\n          }\n        }],\n        subtotal: {\n          formatted_with_symbol: \"\"\n        },\n        total_unique_items: 0\n      },\n      isCartVisible: false,\n      products: [],\n      checkoutToken: {},\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage.bind(this),\n      toggleCart: this.toggleCart.bind(this),\n      handleAddToCart: this.handleAddToCart.bind(this),\n      handleUpdateCartQty: this.handleUpdateCartQty.bind(this),\n      handleRemoveFromCart: this.handleRemoveFromCart.bind(this),\n      handleEmptyCart: this.handleEmptyCart.bind(this),\n      fetchCart: this.fetchCart.bind(this),\n      refreshCart: this.refreshCart.bind(this),\n      handleCaptureCheckout: this.handleCaptureCheckout.bind(this),\n      fetchProducts: this.fetchProducts.bind(this),\n      generateCheckoutToken: this.generateCheckoutToken.bind(this),\n      createCommerceCustomer: this.createCommerceCustomer.bind(this),\n      getCommerceCustomer: this.getCommerceCustomer.bind(this),\n      updateAuthCustomerCommerceID: this.updateAuthCustomerCommerceID.bind(this),\n      getUser: this.getUser.bind(this),\n      listOrdersForCustomer: this.listOrdersForCustomer\n    };\n  }\n  /**\r\n   * Fetch products data from Chec and stores in the products data object.\r\n   * https://commercejs.com/docs/sdk/products\r\n   */\n\n\n  async fetchProducts() {\n    productAPI.get(\"/get\").then(products => {\n      this.setState({\n        products: products.data.data\n      });\n    }).catch(error => {\n      console.log('There was an error fetching the products', error);\n    });\n  }\n\n  async fetchCart() {\n    const cartID = Cookies.get('cartID');\n\n    if (await this.retrieveCart(cartID)) {\n      console.log(\"Cart Retrieved!\");\n    } else if (await this.createCart()) {\n      console.log(\"Cart Created!\");\n    } else {\n      console.error(\"An error occured while fetching the cart.\");\n    }\n  } //Actions\n\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\n\n\n  loadOrderFromLocalStorage() {\n    if (window.localStorage.getItem('order_receipt')) {\n      this.setState({\n        order: JSON.parse(window.localStorage.getItem('order_receipt'))\n      });\n    }\n  }\n  /**\r\n   * Show hide cart in nav\r\n   */\n\n\n  toggleCart() {\n    const {\n      isCartVisible\n    } = this.state;\n    this.setState({\n      isCartVisible: !isCartVisible\n    });\n  } //-> start of cart functions\n\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\n\n\n  async handleAddToCart(productId, quantity) {\n    await cartAPI.post(\"/addto\", {\n      cartID: this.state.cartID,\n      productId: productId,\n      quantity: quantity\n    }).then(item => {\n      this.setState({\n        cart: item.data.cart\n      });\n    }).catch(error => {\n      console.log('There was an adding a cart item', error);\n    });\n  }\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\n\n\n  handleUpdateCartQty(lineItemId, quantity) {\n    cartAPI.put(\"/updateqty\", {\n      cartID: this.state.cartID,\n      lineItemId: lineItemId,\n      quantity: quantity\n    }).then(resp => {\n      this.setState({\n        cart: resp.data.cart\n      });\n    }).catch(error => {\n      console.log('There was an error updating the cart items', error);\n    });\n  }\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\n\n\n  handleRemoveFromCart(lineItemId) {\n    cartAPI.delete(\"/removefrom/\" + this.state.cartID + \"/\" + lineItemId).then(resp => {\n      this.setState({\n        cart: resp.data.cart\n      });\n    }).catch(error => {\n      console.error('There was an error removing the item from the cart', error);\n    });\n  }\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\n\n\n  async handleEmptyCart() {\n    await cartAPI.delete(\"/empty/\" + this.state.cartID).then(resp => {\n      this.setState({\n        cart: resp.data.cart\n      });\n    }).catch(error => {\n      console.error('There was an error emptying the cart', error);\n    });\n  }\n  /**\r\n  * Creates a cart\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\n\n\n  async createCart() {\n    return await cartAPI.get(\"/create\").then(cart => {\n      this.setState({\n        cart: cart.data,\n        cartID: cart.data.id\n      });\n      Cookies.set('cartID', cart.data.id);\n      return true;\n    }).catch(error => {\n      console.error(error);\n      return false;\n    });\n  }\n\n  async retrieveCart(cartID) {\n    return await cartAPI.get(\"/fetch/\" + cartID).then(cart => {\n      this.setState({\n        cart: cart.data,\n        cartID: cart.data.id\n      });\n      return true;\n    }).catch(error => {\n      console.error(error);\n      return false;\n    });\n  }\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\n\n\n  refreshCart() {\n    this.createCart();\n  } //=> end fo cart functions\n\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {object} newOrder The new order object data\r\n   */\n\n\n  handleCaptureCheckout(newOrder) {\n    try {\n      ordermanagementAPI.post(\"/checkout/create\", newOrder).then(order => {\n        this.setState({\n          order: order.data\n        }); // Store the order in session storage so we can show it again\n        // if the user refreshes the page!\n\n        window.localStorage.setItem('order_receipt', JSON.stringify(order)); // Clears the cart\n\n        this.refreshCart(); // Send the user to the receipt\n\n        Router.push({\n          pathname: '/confirmation'\n        });\n      }).catch(error => {\n        console.log('There was an error confirming your order', error);\n      });\n    } catch (error) {\n      console.error(\"There has been an error placing the order\", error);\n    }\n  }\n  /**\r\n     *  Generates a checkout token\r\n     *  https://commercejs.com/docs/sdk/checkout#generate-token\r\n     */\n\n\n  generateCheckoutToken() {\n    try {\n      const {\n        cart\n      } = this.state;\n\n      if (cart.line_items.length) {\n        ordermanagementAPI.post(\"/checkout/generatetoken\", {\n          cartID: cart.id\n        }).then(token => {\n          this.setState({\n            checkoutToken: token.data\n          });\n        }).catch(error => {\n          console.log('There was an error in generating a token', error);\n        });\n      }\n    } catch (error) {\n      console.error(\"There has been an error generating a checkout token for the order\", error);\n    }\n  }\n\n  async createCommerceCustomer(customerEmail) {\n    try {\n      return await ordermanagementAPI.post(\"/customer/create\", {\n        email: customerEmail\n      }).then(customer => {\n        return customer;\n      }).catch(error => {\n        console.log('There was an error creating a customer with the email:' + customerEmail, error);\n        return null;\n      });\n    } catch (error) {\n      console.error('There was an error creating a customer with the email:' + customerEmail, error);\n      return null;\n    }\n  }\n\n  async getCommerceCustomer(customerID) {\n    try {\n      return await ordermanagementAPI.get(\"/customer/get/\" + customerID).then(customer => {\n        return customer;\n      }).catch(error => {\n        console.log('There was an error retrieving the customer with the id:' + customerID, error);\n        return null;\n      });\n    } catch (error) {\n      console.error('There was an error retrieving the customer with the id:' + customerID, error);\n      return null;\n    }\n  }\n\n  async listOrdersForCustomer(id) {\n    try {\n      return await ordermanagementAPI.get(\"/listorders/\" + customerID).then(orders => {\n        return orders; // Add returns for other catch \n      }).catch(error => {\n        console.log('There was an error retrieving a list of orders for the customer', error);\n      });\n    } catch (error) {\n      console.error('There was an error retrieving a list of orders for the customer' + customerID, error);\n    }\n  }\n\n  async updateAuthCustomerCommerceID(idObject) {\n    try {\n      return await axios.post(\"/api/auth/updateuser\", idObject).then(customer => {\n        return customer; // Add returns for other catch \n      }).catch(error => {\n        console.log('There was an error updating the customer', error);\n      });\n    } catch (error) {\n      console.error('There was an error updating the customer' + customerID, error);\n    }\n  }\n\n  async getUser(id) {\n    try {\n      return await axios.get(\"/api/auth/getuser/\" + id).then(customer => {\n        return customer; // Add returns for other catch \n      }).catch(error => {\n        console.log('There was an error updating the customer', error);\n      });\n    } catch (error) {\n      console.error('There was an error updating the customer' + customerID, error);\n    }\n  }\n\n  render() {\n    return __jsx(AppContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport { AppWrapper };\nexport function useAppContext() {\n  _s();\n\n  return useContext(AppContext);\n}\n\n_s(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");","map":{"version":3,"sources":["C:/Users/KGM/OneDrive/Documents/GitHub/chec/fyp/context/state.js"],"names":["createContext","React","Component","axios","Cookies","Router","AppContext","cartAPI","create","baseURL","process","env","CARTMSURL","timeout","headers","productAPI","PRODUCTSMSURL","ordermanagementAPI","ORDERMANAGEMENTMSURL","AppWrapper","constructor","state","cartID","order","customer","firstname","cart","line_items","media","source","line_total","formatted_with_symbol","subtotal","total_unique_items","isCartVisible","products","checkoutToken","loadOrderFromLocalStorage","bind","toggleCart","handleAddToCart","handleUpdateCartQty","handleRemoveFromCart","handleEmptyCart","fetchCart","refreshCart","handleCaptureCheckout","fetchProducts","generateCheckoutToken","createCommerceCustomer","getCommerceCustomer","updateAuthCustomerCommerceID","getUser","listOrdersForCustomer","get","then","setState","data","catch","error","console","log","retrieveCart","createCart","window","localStorage","getItem","JSON","parse","productId","quantity","post","item","lineItemId","put","resp","delete","id","set","newOrder","setItem","stringify","push","pathname","length","token","customerEmail","email","customerID","orders","idObject","render","props","children","useAppContext","useContext"],"mappings":"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","sourcesContent":["import { createContext } from 'react';\r\nimport React, { Component } from \"react\"\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie'\r\nimport Router from 'next/router';\r\n\r\n\r\nexport const AppContext = createContext();\r\n\r\nconst cartAPI = axios.create({\r\n  baseURL: process.env.CARTMSURL,\r\n  timeout: 3000,\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  }\r\n});\r\n\r\nconst productAPI = axios.create({\r\n  baseURL: process.env.PRODUCTSMSURL,\r\n  timeout: 3000,\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  }\r\n});\r\n\r\nconst ordermanagementAPI = axios.create({\r\n  baseURL: process.env.ORDERMANAGEMENTMSURL,\r\n  timeout: 3000,\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  }\r\n});\r\n\r\nclass AppWrapper extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cartID: \"\",\r\n      order: { customer: { firstname: \"\" } },\r\n\r\n      cart: { line_items: [{ media: { source: \"\" }, line_total: { formatted_with_symbol: \"\" } }], subtotal: { formatted_with_symbol: \"\" }, total_unique_items: 0 },\r\n      isCartVisible: false,\r\n      products: [],\r\n      checkoutToken: {},\r\n      loadOrderFromLocalStorage: this.loadOrderFromLocalStorage.bind(this),\r\n      toggleCart: this.toggleCart.bind(this),\r\n      handleAddToCart: this.handleAddToCart.bind(this),\r\n      handleUpdateCartQty: this.handleUpdateCartQty.bind(this),\r\n      handleRemoveFromCart: this.handleRemoveFromCart.bind(this),\r\n      handleEmptyCart: this.handleEmptyCart.bind(this),\r\n      fetchCart: this.fetchCart.bind(this),\r\n      refreshCart: this.refreshCart.bind(this),\r\n      handleCaptureCheckout: this.handleCaptureCheckout.bind(this),\r\n      fetchProducts: this.fetchProducts.bind(this),\r\n      generateCheckoutToken: this.generateCheckoutToken.bind(this),\r\n      createCommerceCustomer: this.createCommerceCustomer.bind(this),\r\n      getCommerceCustomer: this.getCommerceCustomer.bind(this),\r\n      updateAuthCustomerCommerceID: this.updateAuthCustomerCommerceID.bind(this),\r\n      getUser: this.getUser.bind(this),\r\n      listOrdersForCustomer: this.listOrdersForCustomer\r\n    };\r\n\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch products data from Chec and stores in the products data object.\r\n   * https://commercejs.com/docs/sdk/products\r\n   */\r\n  async fetchProducts() {\r\n    productAPI.get(\"/get\").then((products) => {\r\n      this.setState({ products: products.data.data });\r\n    }).catch((error) => {\r\n      console.log('There was an error fetching the products', error);\r\n    });\r\n  }\r\n\r\n  async fetchCart() {\r\n    const cartID = Cookies.get('cartID');\r\n\r\n    if (await this.retrieveCart(cartID)) {\r\n      console.log(\"Cart Retrieved!\");\r\n    } else if (await this.createCart()) {\r\n      console.log(\"Cart Created!\")\r\n    } else {\r\n      console.error(\"An error occured while fetching the cart.\")\r\n    }\r\n  }\r\n\r\n  //Actions\r\n\r\n  /**\r\n   * Fetch a saved order receipt from local storage so we can show the confirmation page\r\n   * again between page refreshes.\r\n   */\r\n  loadOrderFromLocalStorage() {\r\n    if (window.localStorage.getItem('order_receipt')) {\r\n      this.setState({ order: JSON.parse(window.localStorage.getItem('order_receipt')) })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show hide cart in nav\r\n   */\r\n  toggleCart() {\r\n    const { isCartVisible } = this.state;\r\n    this.setState({\r\n      isCartVisible: !isCartVisible,\r\n    });\r\n  }\r\n\r\n  //-> start of cart functions\r\n  /**\r\n   * Adds a product to the current cart in session\r\n   * https://commercejs.com/docs/sdk/cart/#add-to-cart\r\n   *\r\n   * @param {string} productId The ID of the product being added\r\n   * @param {number} quantity The quantity of the product being added\r\n   */\r\n  async handleAddToCart(productId, quantity) {\r\n\r\n    await cartAPI.post(\"/addto\", { cartID: this.state.cartID, productId: productId, quantity: quantity }).then((item) => {\r\n      this.setState({ cart: item.data.cart });\r\n    }).catch((error) => {\r\n      console.log('There was an adding a cart item', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates line_items in cart\r\n   * https://commercejs.com/docs/sdk/cart/#update-cart\r\n   *\r\n   * @param {string} lineItemId ID of the cart line item being updated\r\n   * @param {number} quantity New line item quantity to update\r\n   */\r\n  handleUpdateCartQty(lineItemId, quantity) {\r\n    cartAPI.put(\"/updateqty\", { cartID: this.state.cartID, lineItemId: lineItemId, quantity: quantity }).then((resp) => {\r\n      this.setState({ cart: resp.data.cart })\r\n    }).catch((error) => {\r\n      console.log('There was an error updating the cart items', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes line item from cart\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   *\r\n   * @param {string} lineItemId ID of the line item being removed\r\n   */\r\n  handleRemoveFromCart(lineItemId) {\r\n    cartAPI.delete(\"/removefrom/\" + this.state.cartID + \"/\" + lineItemId).then((resp) => {\r\n      this.setState({ cart: resp.data.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error removing the item from the cart', error);\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Empties cart contents\r\n   * https://commercejs.com/docs/sdk/cart/#remove-from-cart\r\n   */\r\n  async handleEmptyCart() {\r\n    await cartAPI.delete(\"/empty/\" + this.state.cartID).then((resp) => {\r\n      this.setState({ cart: resp.data.cart })\r\n    }).catch((error) => {\r\n      console.error('There was an error emptying the cart', error);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Creates a cart\r\n  * https://commercejs.com/docs/sdk/cart\r\n  */\r\n  async createCart() {\r\n\r\n    return await cartAPI.get(\"/create\").then((cart) => {\r\n      this.setState({ cart: cart.data, cartID: cart.data.id });\r\n      Cookies.set('cartID', cart.data.id);\r\n      return true;\r\n    }\r\n    ).catch((error) => {\r\n      console.error(error)\r\n      return false;\r\n    }\r\n    );\r\n  }\r\n\r\n  async retrieveCart(cartID) {\r\n    return await cartAPI.get(\"/fetch/\" + cartID).then((cart) => {\r\n      this.setState({ cart: cart.data, cartID: cart.data.id });\r\n      return true;\r\n    }\r\n    ).catch((error) => {\r\n      console.error(error)\r\n      return false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refreshes to a new cart\r\n   * https://commercejs.com/docs/sdk/cart#refresh-cart\r\n   */\r\n  refreshCart() {\r\n    this.createCart();\r\n  }\r\n  //=> end fo cart functions\r\n\r\n  /**\r\n   * Captures the checkout\r\n   * https://commercejs.com/docs/sdk/checkout#capture-order\r\n   *\r\n   * @param {object} newOrder The new order object data\r\n   */\r\n  handleCaptureCheckout(newOrder) {\r\n\r\n    try {\r\n      ordermanagementAPI.post(\"/checkout/create\", newOrder).then((order) => {\r\n\r\n        this.setState({\r\n          order: order.data,\r\n        });\r\n\r\n        // Store the order in session storage so we can show it again\r\n        // if the user refreshes the page!\r\n        window.localStorage.setItem('order_receipt', JSON.stringify(order));\r\n        // Clears the cart\r\n        this.refreshCart();\r\n        // Send the user to the receipt\r\n        Router.push({\r\n          pathname: '/confirmation'\r\n        })\r\n      }).catch((error) => {\r\n        console.log('There was an error confirming your order', error);\r\n      });\r\n    } catch (error) {\r\n      console.error(\"There has been an error placing the order\", error);\r\n    }\r\n  }\r\n  /**\r\n     *  Generates a checkout token\r\n     *  https://commercejs.com/docs/sdk/checkout#generate-token\r\n     */\r\n  generateCheckoutToken() {\r\n\r\n    try {\r\n      const { cart } = this.state;\r\n      if (cart.line_items.length) {\r\n\r\n        ordermanagementAPI.post(\"/checkout/generatetoken\", { cartID: cart.id }).then(token => {\r\n          this.setState({ checkoutToken: token.data });\r\n        }).catch(error => {\r\n          console.log('There was an error in generating a token', error);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"There has been an error generating a checkout token for the order\", error);\r\n    }\r\n  };\r\n\r\n  async createCommerceCustomer(customerEmail) {\r\n    try {\r\n      return await ordermanagementAPI.post(\"/customer/create\", { email: customerEmail }).then((customer) => {\r\n\r\n        return customer;\r\n\r\n      }).catch((error) => {\r\n        console.log('There was an error creating a customer with the email:' + customerEmail, error);\r\n        return null;\r\n      });\r\n    } catch (error) {\r\n      console.error('There was an error creating a customer with the email:' + customerEmail, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getCommerceCustomer(customerID) {\r\n    try {\r\n      return await ordermanagementAPI.get(\"/customer/get/\" + customerID).then((customer) => {\r\n\r\n        return customer;\r\n\r\n      }).catch((error) => {\r\n        console.log('There was an error retrieving the customer with the id:' + customerID, error);\r\n        return null;\r\n      });\r\n    } catch (error) {\r\n      console.error('There was an error retrieving the customer with the id:' + customerID, error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  async listOrdersForCustomer(id) {\r\n    try {\r\n      return await ordermanagementAPI.get(\"/listorders/\" + customerID).then((orders) => {\r\n\r\n        return orders; // Add returns for other catch \r\n\r\n      }).catch((error) => {\r\n        console.log('There was an error retrieving a list of orders for the customer', error);\r\n      });\r\n    } catch (error) {\r\n      console.error('There was an error retrieving a list of orders for the customer' + customerID, error);\r\n    }\r\n  }\r\n  async updateAuthCustomerCommerceID(idObject) {\r\n    try {\r\n      return await axios.post(\"/api/auth/updateuser\", idObject).then((customer) => {\r\n\r\n        return customer; // Add returns for other catch \r\n\r\n      }).catch((error) => {\r\n        console.log('There was an error updating the customer', error);\r\n      });\r\n    } catch (error) {\r\n      console.error('There was an error updating the customer' + customerID, error);\r\n    }\r\n  }\r\n\r\n  async getUser(id) {\r\n    try {\r\n      return await axios.get(\"/api/auth/getuser/\" + id).then((customer) => {\r\n\r\n        return customer; // Add returns for other catch \r\n\r\n      }).catch((error) => {\r\n        console.log('There was an error updating the customer', error);\r\n      });\r\n    } catch (error) {\r\n      console.error('There was an error updating the customer' + customerID, error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport { AppWrapper };\r\n\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}